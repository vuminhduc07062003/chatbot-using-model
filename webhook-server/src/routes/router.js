require('dotenv').config(); // Load bi·∫øn m√¥i tr∆∞·ªùng
const express = require('express');
const axios = require('axios');
const router = express.Router();

// L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;

const STORE_INFO = `
üèçÔ∏è C·ª¨A H√ÄNG XE PH√ÇN KH·ªêI L·ªöN ABC üèÅ

üìç ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng L√™ L·ª£i, Ph∆∞·ªùng B·∫øn Th√†nh, Qu·∫≠n 1, TP.H·ªì Ch√≠ Minh  
üïí Gi·ªù ho·∫°t ƒë·ªông: 8h00 - 21h00 (m·ªói ng√†y, k·ªÉ c·∫£ Ch·ªß nh·∫≠t & ng√†y l·ªÖ)  
üìû Hotline: 0909 123 456  
üåê Website: https://abc-motor.vn  
üì© Email: lienhe@abc-motor.vn  
üì± Facebook: fb.com/abcmotor.vn  
üì¶ Giao h√†ng: To√†n qu·ªëc, h·ªó tr·ª£ tr·∫£ g√≥p 0%

üöó S·∫¢N PH·∫®M CUNG C·∫§P:
- Xe ph√¢n kh·ªëi l·ªõn c≈© v√† m·ªõi: Honda, Yamaha, Kawasaki, Suzuki, BMW, Ducati,...
- Xe tay ga cao c·∫•p: SH, Vespa, NVX, Janus,...
- Ph·ª• t√πng & ph·ª• ki·ªán ch√≠nh h√£ng: nh·ªõt, m≈© b·∫£o hi·ªÉm, gƒÉng tay, p√¥ ƒë·ªô,...
- D·ªãch v·ª• b·∫£o tr√¨, b·∫£o d∆∞·ª°ng & ƒë·ªô xe theo y√™u c·∫ßu

üíµ CH√çNH S√ÅCH B√ÅN H√ÄNG:
- B·∫£o h√†nh 6‚Äì12 th√°ng t√πy xe
- H·ªó tr·ª£ tr·∫£ g√≥p qua ng√¢n h√†ng ho·∫∑c app t√†i ch√≠nh (FE Credit, Home Credit, Momo,...)
- H·ªó tr·ª£ sang t√™n ch√≠nh ch·ªß to√†n qu·ªëc
- Bao test m√°y, ki·ªÉm tra k·ªπ thu·∫≠t tr∆∞·ªõc khi giao

üì∏ H·ªñ TR·ª¢ TR·ª∞C TUY·∫æN:
- Xem xe qua video call (Zalo/FB)
- C·∫≠p nh·∫≠t xe m·ªõi h√†ng ng√†y tr√™n website v√† fanpage

C·∫¢M ∆†N B·∫†N ƒê√É GH√â THƒÇM ABC MOTOR - N∆†I H·ªòI T·ª§ T·ªêC ƒê·ªò & PHONG C√ÅCH!
`;
// GET /api/webhook - D√πng ƒë·ªÉ Facebook g·ªçi khi x√°c minh Webhook
router.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode === 'subscribe' && token === VERIFY_TOKEN) {
    return res.status(200).send(challenge);
  } else {
    return res.sendStatus(403);
  }
});

// POST /api/webhook - Nh·∫≠n tin nh·∫Øn t·ª´ Facebook g·ª≠i t·ªõi
router.post('/webhook', async (req, res) => {
  const body = req.body;

  if (body.object === 'page') {
    for (const entry of body.entry) {
      const event = entry.messaging[0];
      const senderId = event.sender.id;

      if (event.message && event.message.text) {
        const text = event.message.text;

        // G·ªçi Ollama ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi
        const reply = await askOllama(text);

        sendMessage(senderId, reply);
      } else if (event.postback) {
        const payload = event.postback.payload;
        sendMessage(senderId, `üëâ B·∫°n ƒë√£ click: ${payload}`);
      }
    }
    return res.status(200).send('EVENT_RECEIVED');
  } else {
    return res.sendStatus(404);
  }
});

// H√†m g·ª≠i tin nh·∫Øn v·ªÅ cho ng∆∞·ªùi d√πng th√¥ng qua Facebook Graph API
async function sendMessage(recipientId, messageText) {
  try {
    await axios.post(
      `https://graph.facebook.com/v19.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
      {
        recipient: { id: recipientId },
        message: { text: messageText }
      }
    );
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error.response ? error.response.data : error.message);
  }
}

// H√†m h·ªèi Ollama
async function askOllama(message) {
  try {
    const response = await axios.post('http://localhost:11434/api/generate', {
      model: 'llama3',
      prompt: `Th√¥ng tin c·ª≠a h√†ng:\n${STORE_INFO}\n\nKh√°ch h·ªèi: "${message}"\nH√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ch·ªâ d·ª±a tr√™n th√¥ng tin c·ª≠a h√†ng ·ªü tr√™n.`,
      stream: false
    });
    return response.data.response.trim();
  } catch (error) {
    console.error('‚ùå L·ªói Ollama:', error.response ? error.response.data : error.message);
    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y.";
  }
}

module.exports = router;
